#version 330 core

// Input vertex data, different for all executions of this shader.
in vec3 a_vertex;
in vec3 a_normal;

// Output data ; will be interpolated for each fragment.
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 mvp;
uniform mat4 v;
uniform mat4 m;
uniform vec3 lightPosition_worldspace;

void main(){

	// Output position of the vertex, in clip space : mvp * position
	gl_Position =  mvp * vec4(a_vertex,1);

	// Position of the vertex, in worldspace : m * position
	Position_worldspace = (m * vec4(a_vertex,1)).xyz;

	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( v * m * vec4(a_vertex,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( v * vec4(lightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( v * m * vec4(a_normal,0)).xyz; // Only correct if ModelMatrix does not scale the model

}
